@using BlazorOBS.Components
@using System.Timers

@page "/chat-highlighter"

@inject UserState userState

<div class="chat-highlighter">
    <div class="chat-highlighter-wrap">
        <BlazorObsExtension>
            @if (showHighlight)
            {
                <HighlightedChatMessage Username="@username" Message="@message" Exit="@animateExit" />
            }
        </BlazorObsExtension>
    </div>
</div>

@code {
    private Timer exitTimer;
    private Timer removeMessageTimer;

    private string username { get; set; }
    private string message { get; set; }
    private bool showHighlight { get; set; }
    private bool animateExit { get; set; }

    private async void removeHighlight(object target, ElapsedEventArgs args)
    {
        showHighlight = false;
        animateExit = false;

        await InvokeAsync(StateHasChanged);
    }

    private async void animateExitOfHighlight(object target, ElapsedEventArgs args)
    {
        animateExit = true;

        removeMessageTimer = new Timer(3000);
        removeMessageTimer.AutoReset = false; // do not repeat automatically
        removeMessageTimer.Elapsed += removeHighlight;
        removeMessageTimer.Start();

        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        userState.OnHighlightMessage += HighlightMessage;

        base.OnInitialized();
    }

    async void HighlightMessage(object target, HighlightedMessage highlightedMessage)
    {
        showHighlight = true;
        username = highlightedMessage.Username;
        message = highlightedMessage.Message;

        await InvokeAsync(StateHasChanged);

        exitTimer = new Timer(30 * 1000);
        exitTimer.AutoReset = false; // do not repeat automatically
        exitTimer.Elapsed += animateExitOfHighlight;
        exitTimer.Start();
    }
}

@using BlazorOBS.Services
@using System.Timers
@using Humanizer
@using BlazorOBS.Components.Chat

@inject UserState userState

@page "/chat"

<style>
    .chat-window {
        display: grid;
                            /*  Date-Time   Username     icon       Msg     Actions*/
        grid-template-columns: min-content min-content min-content auto min-content;
    }

    .chat-dtg {
        padding-left: 4px;
        padding-right: 4px;
        grid-column: 1 / 2;
    }

    .chat-icon {
        grid-column: 2 / 3;
        padding-right:2px;
    }

    .chat-user {
        grid-column: 3 / 4;
    }

    .chat-message {
        grid-column: 4 / 5;
        border-bottom: 1px solid #c3c3c3;
    }

    .chat-actions {
        grid-column: 5 / 6;
        border-bottom:1px solid rgba(0,0,0,0.5);
    }

    .chat-full-line {
        grid-column: 3 / 6;
    }

    .msg {
        padding-left: 3px;
        padding-right: 3px;
        border-radius: 2px;
    }

        .msg.log {
            font-size: x-small;
        }

        .msg.messagerecieved {
            background-color: #99c0e1;
            font-weight: bold;
        }

        .msg.userjoined {
            background-color: #99e199;
        }

        .msg.userleft {
            color: gray;
        }

    .icon.log {
        color: darkgray;
    }

    .icon.raidstarted {
        color: blue;
    }

    .icon.raidstarted {
        color: blue;
    }
</style>

<div class="m-2">
    <h1>Chat</h1>

    <div class="chat-window">
        @foreach (var chat in currentChatEvents)
        {
            @switch (chat.Type)
            {
                case TwitchChatEventType.LogError:
                    <ErrorLog DateTimeUTC="@chat.DTGUtc" Message="@chat.Message" />
                    break;
                case TwitchChatEventType.UserJoined:
                    <UserJoined DateTimeUTC="@chat.DTGUtc" Username="@chat.Username" />
                    break;
                case TwitchChatEventType.UserLeft:
                    <UserLeft DateTimeUTC="@chat.DTGUtc" Username="@chat.Username" />
                    break;
                case TwitchChatEventType.HostingStarted:
                    <HostingStarted DateTimeUTC="@chat.DTGUtc" Channel="@chat.Channel" ViewerCount="@chat.Viewers" />
                    break;
                case TwitchChatEventType.HostingStopped:
                    <HostingStopped DateTimeUTC="@chat.DTGUtc" />
                    break;
                case TwitchChatEventType.RaidStarted:
                    <RaidStarted DateTimeUTC="@chat.DTGUtc" Channel="@chat.Channel" />
                    break;
                case TwitchChatEventType.MessageRecieved:
                    <ChatMessage DateTimeUTC="@chat.DTGUtc" Username="@chat.Username" Message="@chat.Message" />
                    break;
                case TwitchChatEventType.CommandRecieved:
                    <ChatCommandReceived DateTimeUTC="@chat.DTGUtc" Command="@chat.Command" Username="@chat.Username" />                    
                    break;
                default:
                    <ChatMessage DateTimeUTC="@chat.DTGUtc" Message="@chat.Message" />
                    break;
            }
        }
    </div>
</div>


@code {
    private Timer chatUpdateTimer;
    private List<TwitchChatEvent> currentChatEvents = new List<TwitchChatEvent>();
    private List<TwitchChatEvent> incomingChatEvents = new List<TwitchChatEvent>();

    private BlazorOBSTwitchClient client;

    int timerTicksInSeconds = 2;
    int dateRefresh = 0;

    protected override void OnInitialized()
    {
        var userSettings = BlazorOBSUserSettings.Get();

        client = BlazorOBSTwitchClient.Create(userSettings);

        client.OnChatEvent = OnChatEvent;

        chatUpdateTimer = new Timer(timerTicksInSeconds * 1000);
        chatUpdateTimer.Elapsed += chatUpdateTick;
        chatUpdateTimer.Start();

        base.OnInitialized();
    }

    void highlightChatMessage(TwitchChatEvent chatEvent)
    {
        userState.ShowHighlightedMessage(chatEvent, new HighlightedMessage
        {
            Username = chatEvent.Username,
            Message = chatEvent.Message
        });
    }

    async void chatUpdateTick(object target, ElapsedEventArgs args)
    {
        dateRefresh += timerTicksInSeconds;

        if (incomingChatEvents.Count > 0)
        {
            // put the incoming events at the top of the list
            currentChatEvents.InsertRange(0, incomingChatEvents.OrderByDescending(e => e.DTGUtc));

            incomingChatEvents.Clear();

            dateRefresh = 0;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            // refresh the humanizer dates at least every 15 seconds
            if (dateRefresh > 15)
            {
                dateRefresh = 0;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    async void OnChatEvent(TwitchChatEvent e)
    {
        // put the new event at the end
        incomingChatEvents.Insert(0, e);

        await InvokeAsync(StateHasChanged);
    }
}
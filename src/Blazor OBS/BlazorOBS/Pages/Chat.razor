@using BlazorOBS.Services
@using System.Timers
@using Humanizer

@page "/chat"

<style>
    .chat-window {
        display:grid;
        grid-template-columns: min-content min-content auto;
    }
    .chat-dtg {
        padding-left:4px;
        padding-right:4px;
        grid-column: 1 / 2;
    }
    .chat-user {
        grid-column: 2 / 3;
    }
    .chat-message {
        grid-column: 3 / 4;
        border-bottom:1px solid #c3c3c3;
    }
    .msg {
        padding-left:3px; 
        padding-right:3px;
        border-radius: 2px;
    }
    .msg.log {
        font-size:x-small;
    }
    .msg.messagerecieved {
        background-color:#99c0e1;
        font-weight:bold;
    }
    .msg.userjoined {
        background-color:#99e199;
    }
    .msg.userleft {
        color:gray;
    }
    .icon.log {
        color: darkgray;
    }
    .icon.raidstarted {
        color: blue;
    }

    .icon.raidstarted {
        color: blue;
    }
</style>


<div class="m-2">
    <h1>Chat</h1>

    <div class="chat-window">
        @foreach (var chat in currentChatEvents)
        {
            <div class="chat-dtg text-nowrap">@chat.DTGUtc.Humanize()</div>
            <div class="chat-user text-nowrap">
                @if(chat.Username != null)
                {
                    <span class="badge">@chat.Username</span>
                }
            </div>
            <div class="chat-message">
                <span class="icon @chat.Type.ToString().ToLower()">
                    @switch (chat.Type)
                    {
                        case TwitchChatEventType.Log:
                            <i class="fas fa-clipboard-list"></i>
                            break;
                        case TwitchChatEventType.LogError:
                            <i class="fas fa-exclamation-triangle"></i>
                            break;
                        case TwitchChatEventType.UserJoined:
                            <i class="fas fa-sign-in-alt"></i>
                            break;
                        case TwitchChatEventType.UserLeft:
                            <i class="fas fa-angle-left"></i>
                            break;
                        case TwitchChatEventType.HostingStarted:
                            <i class="fas fa-h-square"></i>
                            break;
                        case TwitchChatEventType.HostingStopped:
                            <i class="fas fa-h-square"></i>
                            break;
                        case TwitchChatEventType.RaidStarted:
                            <i class="fas fa-birthday-cake"></i>
                            break;
                        case TwitchChatEventType.MessageRecieved:
                            <i class="fas fa-comment-dots"></i>
                            break;
                        case TwitchChatEventType.CommandRecieved:
                            <i class="fas fa-exclamation-circle"></i>
                            break;
                        default:
                            break;
                    }
                </span>
                <span class="msg @chat.Type.ToString().ToLower()">@chat.Message</span>
            </div>
        }
    </div>
</div>


@code {
    private Timer chatUpdateTimer;
    private List<TwitchChatEvent> currentChatEvents = new List<TwitchChatEvent>();
    private List<TwitchChatEvent> incomingChatEvents = new List<TwitchChatEvent>();

    private BlazorOBSTwitchClient client;

    int timerTicksInSeconds = 2;
    int dateRefresh = 0;

    protected override void OnInitialized()
    {
        var userSettings = BlazorOBSUserSettings.Get();

        client = BlazorOBSTwitchClient.Create(userSettings);

        client.OnChatEvent = OnChatEvent;

        chatUpdateTimer = new Timer(timerTicksInSeconds * 1000);
        chatUpdateTimer.Elapsed += chatUpdateTick;
        chatUpdateTimer.Start();

        base.OnInitialized();
    }

    async void chatUpdateTick(object target, ElapsedEventArgs args)
    {
        dateRefresh += timerTicksInSeconds;

        if (incomingChatEvents.Count > 0)
        {
            // put the incoming events at the top of the list
            currentChatEvents.InsertRange(0, incomingChatEvents.OrderByDescending(e => e.DTGUtc));

            incomingChatEvents.Clear();

            dateRefresh = 0;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            // refresh the humanizer dates at least every 15 seconds
            if(dateRefresh > 15)
            {
                dateRefresh = 0;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    async void OnChatEvent(TwitchChatEvent e)
    {
        // put the new event at the end
        incomingChatEvents.Insert(0, e);

        await InvokeAsync(StateHasChanged);
    }
}